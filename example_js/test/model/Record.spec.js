/**
 * Sofodata - gem_database
 * gemstone and gemology information database
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SofodataGemDatabase);
  }
}(this, function(expect, SofodataGemDatabase) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SofodataGemDatabase.Record();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Record', function() {
    it('should create an instance of Record', function() {
      // uncomment below and update the code to test Record
      //var instane = new SofodataGemDatabase.Record();
      //expect(instance).to.be.a(SofodataGemDatabase.Record);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property img (base name: "img")', function() {
      // uncomment below and update the code to test the property img
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property gemstone (base name: "gemstone")', function() {
      // uncomment below and update the code to test the property gemstone
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property locationOfOrigin (base name: "location_of_origin")', function() {
      // uncomment below and update the code to test the property locationOfOrigin
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property treatments (base name: "treatments")', function() {
      // uncomment below and update the code to test the property treatments
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property cutType (base name: "cut_type")', function() {
      // uncomment below and update the code to test the property cutType
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

    it('should have the property cutBy (base name: "cut_by")', function() {
      // uncomment below and update the code to test the property cutBy
      //var instance = new SofodataGemDatabase.Record();
      //expect(instance).to.be();
    });

  });

}));
